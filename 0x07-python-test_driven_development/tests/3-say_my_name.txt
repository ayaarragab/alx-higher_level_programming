testing 3-say_my_name module
============================

>>> say_my_name = __import__('3-say_my_name').say_my_name
>>> say_my_name("John", "Smith")
My name is John Smith


>>> say_my_name("Walter", "White") #doctest: +NORMALIZE_WHITESPACE
My name is Walter White


>>> say_my_name("Bob") #doctest: +NORMALIZE_WHITESPACE
My name is Bob 



>>> say_my_name(12343, "Mohamed") #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: first_name must be a string


>>> say_my_name(None, "Mohamed") #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: first_name must be a string


>>> say_my_name(["Aya Ragab"], "Mohamed") #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: first_name must be a string


>>> say_my_name("Aya", True) #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: last_name must be a string


>>> say_my_name("Aya", None) #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: last_name must be a string


>>> say_my_name(None) #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

>>> say_my_name("") #doctest: +REPORT_NDIFF, +REPORT_CDIFF
My name is  

>>> say_my_name("", "") #doctest: +REPORT_NDIFF, +REPORT_CDIFF
My name is  

>>> say_my_name(" ") #doctest: +REPORT_NDIFF, +REPORT_CDIFF
My name is   

>>> say_my_name(" ", " ") #doctest: +REPORT_NDIFF, +REPORT_CDIFF
My name is    

>>> say_my_name("&@&", "()") #doctest: +REPORT_NDIFF, +REPORT_CDIFF
My name is &@& ()


>>> say_my_name("Aya") #doctest: +NORMALIZE_WHITESPACE
My name is Aya 


>>> say_my_name(None, None) #doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: first_name must be a string


>>> say_my_name("John", "")  #doctest: +NORMALIZE_WHITESPACE
My name is John 

>>> say_my_name("Walter", "")  #doctest: +NORMALIZE_WHITESPACE
My name is Walter 
